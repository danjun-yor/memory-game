{"version":3,"sources":["Functions/index.ts","Components/Card/index.tsx","Components/Deck/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["shuffle","o","sort","Math","random","Card","this","props","size","card","isFlipping","isOpened","shouldShow","handleCardClick","className","getClassName","onClick","id","icon","Component","allIcons","faBicycle","faCube","faBolt","faBomb","faBone","faLeaf","faPlane","faAnchor","faBus","faGlobe","faWineGlass","faTv","faTaxi","faArchway","faAppleAlt","faBacon","faCookie","faFish","faPizzaSlice","faLemon","faIceCream","faSeedling","faCheese","faCarrot","faCandyCane","faChessBishop","faChessKing","faChessPawn","faChessKnight","faChessQueen","faDice","faGuitar","faHeadphones","faMusic","faHeart","faStar","faBroom","faCat","faGhost","faCrow","faMask","faBurn","faCannabis","faBong","faPlus","faShoppingBag","faStore","faTshirt","Deck","state","cards","getNewCards","stage","mapSize","getMapSize","onNextStage","checkCardIds","pow","floor","sqrt","nextGame","slice","setState","totalCardCount","emptyCards","Array","length","fill","map","v","i","isChecked","ids","startFlip","Promise","resolve","reject","setTimeout","finishFlip","showCard","push","flip","every","cnt","shouldFilpCardIds","pairCardIds","splice","iconName","scoreUp","stageUp","cardIds","a","key","bind","App","score","time","timerID","setInterval","startTimer","clearInterval","alert","seconds","hh","String","rest","mm","padStart","ss","formatSeconds","Boolean","window","location","hostname","match","library","add","fas","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9906089f.chunk.js","sourcesContent":["export function shuffle<T>(o: Array<T>): Array<T> {\r\n  o.sort(function() {\r\n    return 0.5 - Math.random();\r\n  });\r\n  return o;\r\n}\r\n\r\nexport function formatSeconds(seconds: number) {\r\n  const hh = String(Math.floor(seconds / 3600));\r\n\r\n  const rest = seconds % 3600;\r\n  const mm = String(Math.floor(rest / 60)).padStart(2, \"0\");\r\n\r\n  const ss = String(seconds % 60).padStart(2, \"0\");\r\n\r\n  return `${hh}:${mm}:${ss}`;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { tCard } from \"../Deck\";\r\n\r\ninterface Props {\r\n  size: number;\r\n  card: tCard;\r\n  handleCardClick: (i: number) => void;\r\n}\r\n\r\ninterface State {}\r\n\r\nexport default class Card extends Component<Props, State> {\r\n  getClassName() {\r\n    const {\r\n      size,\r\n      card: { isFlipping, isOpened, shouldShow, card }\r\n    } = this.props;\r\n\r\n    return `card x${size} ${\r\n      isFlipping ? (isOpened ? \"reverse-flip\" : \"flip\") : \"\"\r\n    } ${shouldShow || !card ? \"show open\" : \"\"} ${!card ? \"disabled\" : \"\"}`;\r\n  }\r\n\r\n  render() {\r\n    const { card, handleCardClick } = this.props;\r\n\r\n    return (\r\n      <li\r\n        className={this.getClassName()}\r\n        onClick={() => handleCardClick(card.id)}\r\n      >\r\n        {card[\"card\"] ? <FontAwesomeIcon icon={card.card} /> : \"\"}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./styles.scss\";\r\nimport {\r\n  faBicycle,\r\n  faCube,\r\n  faBolt,\r\n  faBomb,\r\n  faBone,\r\n  faLeaf,\r\n  faPlane,\r\n  faAnchor,\r\n  faBus,\r\n  faGlobe,\r\n  faWineGlass,\r\n  faTv,\r\n  faTaxi,\r\n  faArchway,\r\n  faAppleAlt,\r\n  faBacon,\r\n  faCookie,\r\n  faFish,\r\n  faPizzaSlice,\r\n  faLemon,\r\n  faIceCream,\r\n  faSeedling,\r\n  faCheese,\r\n  faCarrot,\r\n  faCandyCane,\r\n  faChessBishop,\r\n  faChessKing,\r\n  faChessPawn,\r\n  faChessKnight,\r\n  faChessQueen,\r\n  faDice,\r\n  faGuitar,\r\n  faHeadphones,\r\n  faMusic,\r\n  faHeart,\r\n  faStar,\r\n  faBroom,\r\n  faCat,\r\n  faGhost,\r\n  faCrow,\r\n  faMask,\r\n  faBurn,\r\n  faCannabis,\r\n  faBong,\r\n  faPlus,\r\n  faShoppingBag,\r\n  faStore,\r\n  faTshirt,\r\n  IconDefinition\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { shuffle } from \"../../Functions\";\r\nimport Card from \"../Card\";\r\n\r\nconst allIcons = [\r\n  faBicycle,\r\n  faCube,\r\n  faBolt,\r\n  faBomb,\r\n  faBone,\r\n  faLeaf,\r\n  faPlane,\r\n  faAnchor,\r\n  faBus,\r\n  faGlobe,\r\n  faWineGlass,\r\n  faTv,\r\n  faTaxi,\r\n  faArchway,\r\n  faAppleAlt,\r\n  faBacon,\r\n  faCookie,\r\n  faFish,\r\n  faPizzaSlice,\r\n  faLemon,\r\n  faIceCream,\r\n  faSeedling,\r\n  faCheese,\r\n  faCarrot,\r\n  faCandyCane,\r\n  faChessBishop,\r\n  faChessKing,\r\n  faChessPawn,\r\n  faChessKnight,\r\n  faChessQueen,\r\n  faDice,\r\n  faGuitar,\r\n  faHeadphones,\r\n  faMusic,\r\n  faHeart,\r\n  faStar,\r\n  faBroom,\r\n  faCat,\r\n  faGhost,\r\n  faCrow,\r\n  faMask,\r\n  faBurn,\r\n  faCannabis,\r\n  faBong,\r\n  faPlus,\r\n  faShoppingBag,\r\n  faStore,\r\n  faTshirt\r\n];\r\n\r\ninterface Props {\r\n  stage: number;\r\n  scoreUp: (cnt: number) => void;\r\n  stageUp: () => void;\r\n}\r\n\r\ninterface State {\r\n  cards: Array<tCard>;\r\n  isFlipping: boolean;\r\n  mapSize: number;\r\n  onNextStage: boolean;\r\n}\r\n\r\nexport type tCard = {\r\n  id: number;\r\n  card: IconDefinition | null;\r\n  isOpened: boolean;\r\n  isFlipping: boolean;\r\n  shouldShow: boolean;\r\n  isChecked: boolean;\r\n};\r\n\r\nexport default class Deck extends Component<Props, State> {\r\n  state = {\r\n    cards: this.getNewCards(this.props.stage),\r\n    isFlipping: false,\r\n    mapSize: this.getMapSize(),\r\n    onNextStage: false\r\n  };\r\n\r\n  checkCardIds = [] as Array<number>;\r\n\r\n  getMapSize() {\r\n    return (this.props.stage + 2) * 2 ===\r\n      Math.pow(Math.floor(Math.sqrt((this.props.stage + 2) * 2)), 2)\r\n      ? Math.floor(Math.sqrt((this.props.stage + 2) * 2))\r\n      : Math.floor(Math.sqrt((this.props.stage + 2) * 2)) + 1;\r\n  }\r\n\r\n  getNewCards(stage: number, nextGame = false) {\r\n    const cards = shuffle<IconDefinition>(allIcons).slice(0, stage + 2);\r\n\r\n    /* ToDo: 카드 갯수가 nxn보다 작으면 나머지 칸을 빈카드로 채움 */\r\n    const mapSize = this.getMapSize();\r\n    if (nextGame) {\r\n      this.setState({\r\n        mapSize\r\n      });\r\n    }\r\n    const totalCardCount = Math.pow(mapSize, 2);\r\n    const emptyCards = new Array(totalCardCount - cards.length * 2)\r\n      .fill(0)\r\n      .map((v, i) => {\r\n        return {\r\n          id: 1000 + i,\r\n          card: null,\r\n          isOpened: true,\r\n          isFlipping: false,\r\n          shouldShow: false,\r\n          isChecked: true\r\n        };\r\n      });\r\n\r\n    return [\r\n      ...shuffle<IconDefinition>([...cards, ...cards]).map((card, i) => {\r\n        return {\r\n          id: i,\r\n          card: card,\r\n          isOpened: false,\r\n          isFlipping: false,\r\n          shouldShow: false,\r\n          isChecked: false\r\n        };\r\n      }),\r\n      ...emptyCards\r\n    ];\r\n  }\r\n\r\n  flip(ids: number[]) {\r\n    this.startFlip(ids);\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        setTimeout(() => {\r\n          this.finishFlip(ids);\r\n          return resolve(true);\r\n        }, 400);\r\n        this.showCard(ids);\r\n      }, 400);\r\n    });\r\n  }\r\n\r\n  startFlip(ids: number[]) {\r\n    const cards = this.state.cards.slice();\r\n\r\n    for (let id of ids) {\r\n      if (id < cards.length && cards[id].card) {\r\n        cards[id].isFlipping = true;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      cards\r\n    });\r\n  }\r\n\r\n  finishFlip(ids: number[]) {\r\n    const cards = this.state.cards.slice();\r\n\r\n    for (let id of ids) {\r\n      if (id < cards.length && cards[id].card) {\r\n        cards[id].isOpened = !cards[id].isOpened;\r\n        cards[id].isFlipping = false;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      cards\r\n    });\r\n  }\r\n\r\n  showCard(ids: number[]) {\r\n    const cards = this.state.cards.slice();\r\n\r\n    for (let id of ids) {\r\n      if (id < cards.length && cards[id].card) {\r\n        cards[id].shouldShow = cards[id].isOpened ? false : true;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      cards\r\n    });\r\n  }\r\n\r\n  async handleCardClick(i: number) {\r\n    const cards = this.state.cards.slice();\r\n\r\n    if (!cards[i]) return;\r\n    if (!cards[i].card) return;\r\n    if (cards[i].isOpened) return;\r\n    if (cards[i].isChecked) return;\r\n    if (cards[i].isFlipping) return;\r\n\r\n    const checkCardIds = this.checkCardIds;\r\n    checkCardIds.push(i);\r\n\r\n    await this.flip([i]);\r\n    // console.log(checkCardIds);\r\n    if (cards.every(card => !card.isFlipping)) {\r\n      let cnt = 0;\r\n      const shouldFilpCardIds = [];\r\n      while (checkCardIds.length >= 2) {\r\n        const pairCardIds = checkCardIds.splice(0, 2);\r\n\r\n        if (\r\n          cards[pairCardIds[0]].card!.iconName ===\r\n          cards[pairCardIds[1]].card!.iconName\r\n        ) {\r\n          cards[pairCardIds[0]].isChecked = true;\r\n          cards[pairCardIds[1]].isChecked = true;\r\n          cnt++;\r\n        } else {\r\n          shouldFilpCardIds.push(...pairCardIds);\r\n        }\r\n      }\r\n\r\n      if (shouldFilpCardIds.length > 0) {\r\n        await this.flip(shouldFilpCardIds);\r\n      }\r\n\r\n      this.props.scoreUp(cnt);\r\n      if (cards.every(card => card.isChecked)) {\r\n        this.props.stageUp();\r\n        this.setState({\r\n          cards: this.getNewCards(this.props.stage + 1, true),\r\n          onNextStage: true\r\n        });\r\n      } else {\r\n        this.setState({\r\n          cards: cards\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { cards } = this.state;\r\n\r\n    const cardIds = cards.map(card => card.id);\r\n    await this.flip(cardIds);\r\n    setTimeout(async () => {\r\n      await this.flip(cardIds);\r\n    }, 1000);\r\n  }\r\n\r\n  async componentDidUpdate() {\r\n    const { onNextStage } = this.state;\r\n    const { cards } = this.state;\r\n\r\n    if (onNextStage) {\r\n      this.setState({\r\n        onNextStage: false\r\n      });\r\n      setTimeout(async () => {\r\n        const cardIds = cards.map(card => card.id);\r\n        await this.flip(cardIds);\r\n        setTimeout(async () => {\r\n          await this.flip(cardIds);\r\n        }, 1000);\r\n      }, 400);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { cards, mapSize } = this.state;\r\n\r\n    return (\r\n      <section className=\"deck\">\r\n        <ul className=\"cards\">\r\n          {cards.map((card, i) => (\r\n            <Card\r\n              key={card.id}\r\n              size={mapSize}\r\n              card={card}\r\n              handleCardClick={this.handleCardClick.bind(this)}\r\n            />\r\n          ))}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./reset.scss\";\nimport \"./styles.scss\";\nimport Deck from \"./Components/Deck\";\nimport { formatSeconds } from \"./Functions\";\n\ninterface Props {}\n\ninterface State {}\n\nexport default class App extends Component<Props, State> {\n  state = {\n    stage: 2,\n    score: 0,\n    time: 0\n  };\n\n  timerID = (0 as unknown) as NodeJS.Timeout;\n\n  // 레벨 초기화\n  initStage() {\n    this.setState({ stage: 1 });\n  }\n\n  // 레벨 업\n  stageUp() {\n    this.setState({\n      stage: this.state.stage + 1\n    });\n  }\n\n  startTimer() {\n    this.timerID = setInterval(() => {\n      this.setState({\n        time: this.state.time + 1\n      });\n    }, 1000);\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  scoreUp(cnt: number) {\n    this.setState({\n      score: this.state.score + 100 * cnt\n    });\n  }\n\n  render() {\n    const { stage, score, time } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>짝 맞추기 게임</h1>\n          <button\n            onClick={() => {\n              alert(\"순위!\");\n            }}\n          >\n            로그인\n          </button>\n        </header>\n        <main>\n          <section className=\"score-panel\">\n            <div>\n              스테이지: <span>{stage}</span>\n            </div>\n            <div>\n              점수: <span>{score}</span>\n            </div>\n            <div>\n              시간: <span>{formatSeconds(time)}</span>\n            </div>\n          </section>\n          <Deck\n            stage={stage}\n            scoreUp={this.scoreUp.bind(this)}\n            stageUp={this.stageUp.bind(this)}\n          />\n        </main>\n\n        <footer></footer>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport \"normalize.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlibrary.add(fas);\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}